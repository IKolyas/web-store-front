{"remainingRequest":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\GitHub\\Vue-project\\web-store\\src\\views\\SinglePage.vue?vue&type=template&id=ef7c559e&","dependencies":[{"path":"F:\\GitHub\\Vue-project\\web-store\\src\\views\\SinglePage.vue","mtime":1612904238703},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}