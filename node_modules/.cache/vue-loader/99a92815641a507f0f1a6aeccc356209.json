{"remainingRequest":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\GitHub\\Vue-project\\web-store\\src\\components\\Item.vue?vue&type=template&id=1c4665c3&","dependencies":[{"path":"F:\\GitHub\\Vue-project\\web-store\\src\\components\\Item.vue","mtime":1612904210030},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}