{"remainingRequest":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\GitHub\\Vue-project\\web-store\\src\\components\\Footer.vue?vue&type=template&id=75959336&scoped=true&","dependencies":[{"path":"F:\\GitHub\\Vue-project\\web-store\\src\\components\\Footer.vue","mtime":1605651350714},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\GitHub\\Vue-project\\web-store\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}